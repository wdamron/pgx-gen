package pgxgen

var Decoders = map[string]OpMap{
	"bool": OpMap{
		"bool":  OpAssign,
		"*bool": OpPtrAssign,
	},
	"int2": OpMap{
		"int":     OpAssign | OpCastInt,
		"*int":    OpPtrAssign | OpCastInt,
		"uint":    OpAssign | OpCastUint,
		"*uint":   OpPtrAssign | OpCastUint,
		"int16":   OpAssign,
		"*int16":  OpPtrAssign,
		"uint16":  OpAssign | OpCastUint16 | OpCheckOverflow,
		"*uint16": OpPtrAssign | OpCastUint16 | OpCheckOverflow,
		"int32":   OpAssign | OpCastUint32,
		"*int32":  OpPtrAssign | OpCastUint32,
		"uint32":  OpAssign | OpCastUint32,
		"*uint32": OpPtrAssign | OpCastUint32,
		"int64":   OpAssign | OpCastInt64,
		"*int64":  OpPtrAssign | OpCastInt64,
		"uint64":  OpAssign | OpCastUint64,
		"*uint64": OpPtrAssign | OpCastUint64,
	},
	"int4": OpMap{
		"int":     OpAssign | OpCastInt,
		"*int":    OpPtrAssign | OpCastInt,
		"uint":    OpAssign | OpCastUint,
		"*uint":   OpPtrAssign | OpCastUint,
		"int16":   OpAssign | OpCastInt16 | OpCheckOverflow,
		"*int16":  OpPtrAssign | OpCastInt16 | OpCheckOverflow,
		"uint16":  OpAssign | OpCastUint16 | OpCheckOverflow,
		"*uint16": OpPtrAssign | OpCastUint16 | OpCheckOverflow,
		"int32":   OpAssign,
		"*int32":  OpPtrAssign,
		"uint32":  OpAssign | OpCastUint32 | OpCheckOverflow,
		"*uint32": OpPtrAssign | OpCastUint32 | OpCheckOverflow,
		"int64":   OpAssign | OpCastInt64,
		"*int64":  OpPtrAssign | OpCastInt64,
		"uint64":  OpAssign | OpCastUint64,
		"*uint64": OpPtrAssign | OpCastUint64,
	},
	"int8": OpMap{
		"int":     OpAssign | OpCastInt,
		"*int":    OpPtrAssign | OpCastInt,
		"uint":    OpAssign | OpCastUint,
		"*uint":   OpPtrAssign | OpCastUint,
		"int16":   OpAssign | OpCastInt16 | OpCheckOverflow,
		"*int16":  OpPtrAssign | OpCastInt16 | OpCheckOverflow,
		"uint16":  OpAssign | OpCastUint16 | OpCheckOverflow,
		"*uint16": OpPtrAssign | OpCastUint16 | OpCheckOverflow,
		"int32":   OpAssign | OpCastInt32 | OpCheckOverflow,
		"*int32":  OpPtrAssign | OpCastInt32 | OpCheckOverflow,
		"uint32":  OpAssign | OpCastUint32 | OpCheckOverflow,
		"*uint32": OpPtrAssign | OpCastUint32 | OpCheckOverflow,
		"int64":   OpAssign,
		"*int64":  OpPtrAssign,
		"uint64":  OpAssign | OpCastUint64 | OpCheckOverflow,
		"*uint64": OpPtrAssign | OpCastUint64 | OpCheckOverflow,
	},
	"float4": OpMap{
		"float32":  OpAssign,
		"*float32": OpPtrAssign,
		"float64":  OpAssign | OpCastFloat64,
		"*float64": OpPtrAssign | OpCastFloat64,
	},
	"float8": OpMap{
		"float32":  OpAssign | OpCastFloat32,
		"*float32": OpPtrAssign | OpCastFloat32,
		"float64":  OpAssign,
		"*float64": OpPtrAssign,
	},
	"bytea": OpMap{
		"string":  OpAssign | OpCastString,
		"*string": OpAssign | OpCastString,
		"[]byte":  OpAssign,
		"*[]byte": OpPtrAssign,
	},
	"text": OpMap{
		"string":  OpAssign,
		"*string": OpPtrAssign,
		"[]byte":  OpAssign | OpCastBytes,
		"*[]byte": OpPtrAssign | OpCastBytes,
	},
	"varchar": OpMap{
		"string":  OpAssign,
		"*string": OpPtrAssign,
		"[]byte":  OpAssign | OpCastBytes,
		"*[]byte": OpPtrAssign | OpCastBytes,
	},
	"date": OpMap{
		"time.Time":  OpAssign,
		"*time.Time": OpPtrAssign,
	},
	"timestamp": OpMap{
		"time.Time":  OpAssign,
		"*time.Time": OpPtrAssign,
	},
	"timestampTz": OpMap{
		"time.Time":  OpAssign,
		"*time.Time": OpPtrAssign,
	},
	"[]bool": OpMap{
		"[]bool":  OpAssign,
		"*[]bool": OpPtrAssign,
	},
	"[]int2": OpMap{
		"[]int16":  OpAssign,
		"*[]int16": OpPtrAssign,
	},
	"[]int4": OpMap{
		"[]int32":  OpAssign,
		"*[]int32": OpPtrAssign,
	},
	"[]int8": OpMap{
		"[]int64":  OpAssign,
		"*[]int64": OpPtrAssign,
	},
	"[]float4": OpMap{
		"[]float32":  OpAssign,
		"*[]float32": OpPtrAssign,
	},
	"[]float8": OpMap{
		"[]float64":  OpAssign,
		"*[]float64": OpPtrAssign,
	},
	"[]text": OpMap{
		"[]string":  OpAssign,
		"*[]string": OpPtrAssign,
	},
	"[]varchar": OpMap{
		"[]string":  OpAssign,
		"*[]string": OpPtrAssign,
	},
	"[]timestamp": OpMap{
		"[]time.Time":  OpAssign,
		"*[]time.Time": OpPtrAssign,
	},
}

var DecoderNames = map[string]string{
	"bool":        "DecodeBool",
	"int2":        "DecodeInt2",
	"int4":        "DecodeInt4",
	"int8":        "DecodeInt8",
	"float4":      "DecodeFloat4",
	"float8":      "DecodeFloat8",
	"bytea":       "DecodeBytea",
	"text":        "DecodeText",
	"varchar":     "DecodeVarchar",
	"date":        "DecodeDate",
	"timestampTz": "DecodeTimestampTz",
	"timestamp":   "DecodeTimestamp",
	"[]bool":      "DecodeBoolArray",
	"[]int2":      "DecodeInt2Array",
	"[]int4":      "DecodeInt4Array",
	"[]int8":      "DecodeInt8Array",
	"[]float4":    "DecodeFloat4Array",
	"[]float8":    "DecodeFloat8Array",
	"[]text":      "DecodeTextArray",
	"[]varchar":   "DecodeVarcharArray",
	"[]timestamp": "DecodeTimestampArray",
}
