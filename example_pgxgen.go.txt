package pointz

// Generated by pgxgen (see ./example.txt)

import (
	"encoding/hex"
	"errors"

	"github.com/wdamron/pgx"
)

type PointColumnDecoder func(*Point, *pgx.ValueReader) error

type PointTableType struct {
	Decoders    [2]PointColumnDecoder
	ColumnNames [2]string
}

// Rename (alias) columns before running or preparing queries, for faster
// look-ups during decoding
func (t *PointTableType) Rename(cols ...string) ([]string, error) {
	aliases := []string{}
	// If no columns are specified, rename all columns:
	if len(cols) == 0 {
		aliases = []string{
			"x as __00::[]varchar",
			"y as __01::int4",
		}
		return aliases, nil
	}
	for _, name := range cols {
		switch name {
		case "x":
			aliases = append(aliases, "x as __00::[]varchar")
		case "y":
			aliases = append(aliases, "y as __01::int4")
		default:
			return nil, errors.New("column " + name + " not found in type Point")
		}
	}
	return aliases, nil
}

var PointTable = PointTableType{
	Decoders: [2]PointColumnDecoder{
		// Decode column x::[]varchar into (*Point).X
		func(v *Point, vr *pgx.ValueReader) error {
			if vr.Type().DataType != pgx.VarcharArrayOid {
				return errors.New("mismatched data types")
			}
			x := vr.DecodeVarcharArray()
			if vr.Err() != nil {
				return vr.Err()
			}
			v.X = x
			return nil
		},
		// Decode column y::int4 into (*Point).Y
		func(v *Point, vr *pgx.ValueReader) error {
			if vr.Type().DataType != pgx.Int4Oid {
				return errors.New("mismatched data types")
			}
			x := int64(vr.DecodeInt4())
			if vr.Err() != nil {
				return vr.Err()
			}
			*v.Y = x
			return nil
		},
	},
	ColumnNames: [2]string{
		"x",
		"y",
	},
}

func (v *Point) DecodeRow(r *pgx.Rows) error {
	for {
		vr, ok := r.NextColumn()
		if !ok {
			if vr != nil && vr.Err() {
				return vr.Err()
			}
			break
		}
		colname := vr.Type().Name
		// Fast path (renamed columns):
		if len(colname) == 4 && colname[:2] == "__" {
			b, err := hex.DecodeString(colname[2:4])
			if err != nil {
				return err
			}
			index := int(b[0])
			dec := PointTable.Decoders[index]
			if err = dec(v, vr); err != nil {
				return err
			}
			continue
		}
		// Slow path:
		var dec PointColumnDecoder
		switch colname {
		case "x":
			dec = PointTable.Decoders[0]
		case "y":
			dec = PointTable.Decoders[1]
		default:
			return errors.New("unknown column name: " + colname)
		}
		if err := dec(v, vr); err != nil {
			return err
		}
	}
	return nil
}
